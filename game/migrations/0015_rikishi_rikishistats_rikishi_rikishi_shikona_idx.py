# Generated by Django 5.2.5 on 2025-10-28 14:12

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('game', '0014_update_rank_model_with_enum'),
    ]

    operations = [
        migrations.CreateModel(
            name='Rikishi',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('debut', models.ForeignKey(blank=True, help_text='Date of first professional match', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='debut_rikishi', to='game.gamedate', verbose_name='Debut date')),
                ('intai', models.ForeignKey(blank=True, help_text='Date of retirement from professional sumo', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='retired_rikishi', to='game.gamedate', verbose_name='Retirement date')),
                ('rank', models.ForeignKey(blank=True, help_text='Current rank in the banzuke (ranking system)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rikishi', to='game.rank', verbose_name='Rank')),
                ('shikona', models.ForeignKey(help_text='Ring name of the wrestler', on_delete=django.db.models.deletion.PROTECT, related_name='rikishi', to='game.shikona', verbose_name='Shikona')),
                ('shusshin', models.ForeignKey(blank=True, help_text='Place of origin for the wrestler', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rikishi', to='game.shusshin', verbose_name='Shusshin')),
            ],
            options={
                'verbose_name': 'Rikishi',
                'verbose_name_plural': 'Rikishi',
                'ordering': ['shikona__transliteration'],
            },
        ),
        migrations.CreateModel(
            name='RikishiStats',
            fields=[
                ('rikishi', models.OneToOneField(help_text='The wrestler these stats belong to', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='stats', serialize=False, to='game.rikishi', verbose_name='Rikishi')),
                ('potential', models.PositiveIntegerField(help_text='Maximum total stat points this wrestler can achieve')),
                ('xp', models.PositiveIntegerField(default=0, help_text='Experience points earned through training and competition')),
                ('strength', models.PositiveIntegerField(default=1, help_text='Physical power and pushing ability')),
                ('technique', models.PositiveIntegerField(default=1, help_text='Technical skill and knowledge of techniques')),
                ('balance', models.PositiveIntegerField(default=1, help_text='Stability and ability to maintain footing')),
                ('endurance', models.PositiveIntegerField(default=1, help_text='Stamina and ability to sustain effort')),
                ('mental', models.PositiveIntegerField(default=1, help_text='Mental fortitude and fighting spirit')),
            ],
            options={
                'verbose_name': 'Rikishi Stats',
                'verbose_name_plural': 'Rikishi Stats',
                'ordering': ['rikishi__shikona__transliteration'],
                'constraints': [models.CheckConstraint(condition=models.Q(('strength__lte', 20)), name='rikishistats_strength_max', violation_error_message='Strength cannot exceed 20.'), models.CheckConstraint(condition=models.Q(('technique__lte', 20)), name='rikishistats_technique_max', violation_error_message='Technique cannot exceed 20.'), models.CheckConstraint(condition=models.Q(('balance__lte', 20)), name='rikishistats_balance_max', violation_error_message='Balance cannot exceed 20.'), models.CheckConstraint(condition=models.Q(('endurance__lte', 20)), name='rikishistats_endurance_max', violation_error_message='Endurance cannot exceed 20.'), models.CheckConstraint(condition=models.Q(('mental__lte', 20)), name='rikishistats_mental_max', violation_error_message='Mental cannot exceed 20.'), models.CheckConstraint(condition=models.Q(('potential__gte', 5), ('potential__lte', 100)), name='rikishistats_potential_range', violation_error_message='Potential must be between 5 and 100.')],
            },
        ),
        migrations.AddIndex(
            model_name='rikishi',
            index=models.Index(fields=['shikona'], name='rikishi_shikona_idx'),
        ),
    ]
