# Generated by Django 5.2.5 on 2025-10-21 21:45

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('game', '0010_gamedate_gamedate_current_date_idx'),
    ]

    operations = [
        migrations.CreateModel(
            name='Division',
            fields=[
                ('level', models.PositiveSmallIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(choices=[('Makuuchi', 'Makuuchi'), ('Juryo', 'Juryo'), ('Makushita', 'Makushita'), ('Sandanme', 'Sandanme'), ('Jonidan', 'Jonidan'), ('Jonokuchi', 'Jonokuchi'), ('Mae-zumo', 'Mae-zumo'), ('Banzuke-gai', 'Banzuke-gai')], max_length=12)),
            ],
            options={
                'verbose_name': 'Division',
                'verbose_name_plural': 'Divisions',
                'ordering': ['level'],
            },
        ),
        migrations.CreateModel(
            name='Rank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(choices=[('Yokozuna', 'Yokozuna'), ('Ozeki', 'Ozeki'), ('Sekiwake', 'Sekiwake'), ('Komusubi', 'Komusubi'), ('Maegashira', 'Maegashira'), ('Juryo', 'Juryo'), ('Makushita', 'Makushita'), ('Sandanme', 'Sandanme'), ('Jonidan', 'Jonidan'), ('Jonokuchi', 'Jonokuchi'), ('Mae-zumo', 'Mae-zumo'), ('Banzuke-gai', 'Banzuke-gai')], max_length=12)),
                ('level', models.PositiveSmallIntegerField()),
                ('order', models.PositiveSmallIntegerField(blank=True, default=0)),
                ('direction', models.CharField(blank=True, choices=[('East', 'East'), ('West', 'West')], default='', max_length=4)),
                ('division', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ranks', to='game.division')),
            ],
            options={
                'verbose_name': 'Rank',
                'verbose_name_plural': 'Ranks',
                'ordering': ['level', 'order', 'direction'],
            },
        ),
        migrations.CreateModel(
            name='Rikishi',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shikona', models.CharField(help_text='Romanized ring name (shikona)', max_length=64, unique=True)),
                ('shikona_kanji', models.CharField(help_text='Ring name in kanji', max_length=64, unique=True)),
                ('debut', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='debut_rikishi', to='game.gamedate')),
                ('intai', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='retired_rikishi', to='game.gamedate')),
                ('rank', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rikishi', to='game.rank')),
                ('shusshin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rikishi', to='game.shusshin')),
            ],
            options={
                'verbose_name': 'Rikishi',
                'verbose_name_plural': 'Rikishi',
                'ordering': ['shikona'],
            },
        ),
        migrations.CreateModel(
            name='RikishiStats',
            fields=[
                ('rikishi', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='stats', serialize=False, to='game.rikishi')),
                ('potential', models.PositiveIntegerField()),
                ('xp', models.PositiveIntegerField(default=0)),
                ('strength', models.PositiveIntegerField(default=1)),
                ('technique', models.PositiveIntegerField(default=1)),
                ('balance', models.PositiveIntegerField(default=1)),
                ('endurance', models.PositiveIntegerField(default=1)),
                ('mental', models.PositiveIntegerField(default=1)),
            ],
            options={
                'verbose_name': 'Rikishi Stats',
                'verbose_name_plural': 'Rikishi Stats',
                'ordering': ['rikishi__shikona'],
                'constraints': [models.CheckConstraint(condition=models.Q(('strength__lte', 20)), name='rikishistats_strength_max', violation_error_message='Strength cannot exceed 20.'), models.CheckConstraint(condition=models.Q(('technique__lte', 20)), name='rikishistats_technique_max', violation_error_message='Technique cannot exceed 20.'), models.CheckConstraint(condition=models.Q(('balance__lte', 20)), name='rikishistats_balance_max', violation_error_message='Balance cannot exceed 20.'), models.CheckConstraint(condition=models.Q(('endurance__lte', 20)), name='rikishistats_endurance_max', violation_error_message='Endurance cannot exceed 20.'), models.CheckConstraint(condition=models.Q(('mental__lte', 20)), name='rikishistats_mental_max', violation_error_message='Mental cannot exceed 20.')],
            },
        ),
        migrations.AddIndex(
            model_name='rikishi',
            index=models.Index(fields=['shikona'], name='rikishi_shikona_idx'),
        ),
    ]
